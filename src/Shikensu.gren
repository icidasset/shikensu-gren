module Shikensu exposing ( Program, Task, bundle, list, perform, program, programs, read, write )

{-|

# 🚀

@docs program, programs, Program, Task, list, perform


# IO

@docs read, write


# 🛠️

@docs bundle

-}

import Bytes
import FileSystem exposing ( EntityType(..) )
import FileSystem.Path as Path exposing ( Path )
import Init
import Node
import Shikensu.Bundle as Bundle exposing ( Bundle )
import Shikensu.Definition as Definition exposing ( Definition )
import Shikensu.Error as Error exposing ( Error(..) )
import Stream
import Task



-- 🧩


{-| Alias for a Node program.
-}
type alias Program =
    Node.SimpleProgram {}


{-| Alias for the main `Task` type we'll be working with here.
-}
type alias Task =
    Task.Task Error Bundle



-- 🚀


{-| Create a Shikensu Program.

This is basically a wrapper around `list` and `perform`.
It creates a `SimpleProgram` for you, initialises the needed permissions,
lists the given directory path, and finally performs the given task (sequence).
It also prints errors to stderr or a success message to stdout.

The example below with the comments should help you understand the flow:

    import FileSystem.Path as Path
    import Shikensu
    import Shikensu.Contrib as Shikensu
    import Task

    -- Our `Program` which references our `sequence` (more on that later)
    -- and our relative directory path we want to list (empty path = current directory)
    main =
        Shikensu.program sequence Path.empty

    -- This is our `sequence`.
    -- Here we receive a `Task` that contains the directory listing (aka. the compendium)
    -- We essentially do two things with this listing:
    -- (1) We manipulate it (these are the `Task.map` calls)
    -- (2) Or we perform some IO operation (these are the `Task.andThen` calls)
           -> `read` reads the content of the files.
           -> `write` writes the manipulated in-memory representations of the files back to disk.
    sequence task =
        task
            |> Task.map (Shikensu.withExtension "md")
            |> Task.andThen Shikensu.read
            |> Task.map (Shikensu.renderContent markdownRenderer) -- See `example` folder
            |> Task.andThen (Shikensu.write destinationPath)

-}
program : (Task -> Task) -> Path -> Program
program sequence path =
    programs
        [ { path = path
          , sequence = sequence
          }
        ]


{-| Provides a way to make multiple lists and operate on them.

Technically not multiple programs, but same idea as
the `program` function, just with multiple lists.

Programs are performed sequentially.

    import FileSystem.Path as Path
    import Shikensu

    Shikensu.programs
        [ { path = Path.fromPosixString "./posts"
          , sequence = Task.andThen Shikensu.read
          }
        , { path = Path.fromPosixString "./images"
          , sequence = Task.map (\bundle -> ...)
          }
        ]

-}
programs :
    Array
        { path : Path
        , sequence : Task -> Task
        }
    -> Program
programs collection =
    perform
        { onSuccess = \env _ ->
            Stream.write (Bytes.fromString "🧪 Sequence completed\n") env.stdout
                |> Task.map (\_ -> {})
                |> Task.onError (\_ -> Task.succeed {})
        , onError = \env err ->
            Stream.write (Bytes.fromString ("🚨 " ++ Error.toString err ++ "\n")) env.stderr
                |> Task.map (\_ -> {})
                |> Task.onError (\_ -> Task.succeed {})
        }
        (\fsPermission ->
            Array.foldl
                (\{ path, sequence } ->
                    Task.andThen
                        (\_ ->
                            path
                                |> list fsPermission
                                |> sequence
                        )
                )
                ([]
                    |> bundle fsPermission
                    |> Task.succeed
                )
                collection
        )


{-| The `list` function itself, unwrapped.

Recursively lists a directory and then gives you a `Task`
containing a `Bundle` which in turns has an array of `Definition`s
stored under the property named `compendium`.

This collection of `Definition`s is the main thing you'll be working with.
The goal of this library is to scan a file tree, manipulate it and then
optionally write it back to disk. This is done through these definitions.

    import FileSystem.Path as Path
    import Shikensu

    Shikensu.perform
        -- To ignore, return `Cmd.none`
        { onSuccess = \env _ -> Stream.write env.stdout "🧪 Sequence completed"
        , onError = \env err -> Stream.write env.stderr ("🚨 " ++ Error.toString err)
        }
        (\fsPermission ->
            Path.empty
                |> Shikensu.list fsPermission
                |> Task.map (Shikensu.withExtension "md")
        )

-}
list : FileSystem.Permission -> Path -> Task
list fsPermission readPath =
    Path.empty
        |> recursiveList fsPermission readPath
        |> Task.map
                (\compendium ->
                    { compendium = compendium

                    , -- Context:
                      fsPermission = fsPermission
                    , readingDirectory = Just readPath
                    }
                )


{-| A utility function that helps you create programs.

This function is also useful for when you want to write definitions to disk.
Maybe you have a JSON file and you want to split it up in multiple files,
that's something you can do with this function.

    import FileSystem.Path as Path
    import Shikensu

    Shikensu.perform
        -- To ignore, return `Cmd.none`
        { onSuccess = \env _ -> Stream.write env.stdout "🧪 Sequence completed"
        , onError = \env err -> Stream.write env.stderr ("🚨 " ++ Error.toString err)
        }
        (\fsPermission ->
            [ { baseName = "json-file-1"
              , content = Just jsonBytes
              , directoryPath = Path.fromPosixString "splitted"
              , extensionName = Just "json"
              , metadata = Dict.empty
              }
            ]
                |> Shikensu.bundle fsPermission
                |> Task.andThen (Shikensu.write CurrentDirectory)
        )

This uses `Node.defineSimpleProgram` and `FileSystem.initialize` underneath
and then manages the `Shikensu.Task` value created by `list` or some other function.

See the `list` function above for an example using `list`.

-}
perform :
    { onSuccess : Node.Environment -> a -> Task.Task Error {}
    , onError : Node.Environment -> Error -> Task.Task Never {}
    }
    -> (FileSystem.Permission -> Task.Task Error a)
    -> Program
perform errorHandling taskCreator =
    Node.defineSimpleProgram
        (\env ->
            Init.await
                FileSystem.initialize
                (\permission ->
                    permission
                        |> taskCreator
                        |> Task.andThen (\result ->
                            errorHandling.onSuccess env result
                        )
                        |> Task.onError (\err ->
                            errorHandling.onError env err
                        )
                        |> Task.onError (\_ -> Task.succeed {})
                        |> Node.endSimpleProgram
                )
        )



-- IO


{-| Read the files in the given compendium/bundle,
setting the `content` property in the definition.
-}
read : Bundle -> Task
read bun =
    bun.compendium
        |> Array.map
                (\def ->
                    when bun.readingDirectory is
                        Just readingDirectory ->
                            readDefinition bun.fsPermission readingDirectory def

                        Nothing ->
                            Task.succeed def
                )
        |> Task.sequence
        |> Task.map (\compendium -> { bun | compendium = compendium })


{-| Write each definition to their respective location.
The location will depend on the destination path.
-}
write : Path -> Bundle -> Task
write destinationPath bun =
    bun.compendium
        |> Array.map (writeDefinition bun.fsPermission destinationPath)
        |> Task.sequence
        |> Task.map (\_ -> bun)



-- 🛠️


{-| A `Task` that bundles an array of definitions (compendium).

Use this to write a custom array of definitions to disk
(there's an example in the `perform` function docs).

-}
bundle : FileSystem.Permission -> Array Definition -> Bundle
bundle fsPermission compendium =
    { compendium = compendium

    , --
      fsPermission = fsPermission
    , readingDirectory = Nothing
    }



-- ㊙️  /  IO


{-| Read the content of a given definition.
-}
readDefinition : FileSystem.Permission -> Path -> Definition -> Task.Task Error Definition
readDefinition fsPermission readingDirectory def =
    let
        path =
            Path.prepend readingDirectory def.path
    in
    path
        |> FileSystem.readFile fsPermission
        |> Task.mapError (\err -> PlatformError { err = err, path = path })
        |> Task.map (\bytes -> { def | content = Just bytes })


{-| Write a definition to its respective location.
The location will depend on the given directory path and the environment it was run in.
The given directory path must be an absolute path!
-}
writeDefinition : FileSystem.Permission -> Path -> Definition -> Task.Task Error {}
writeDefinition permission destinationDirectory def =
    let
        path =
            Path.prepend destinationDirectory def.path
    in
    path
        |> Path.parentPath
        |> Maybe.map
                (FileSystem.makeDirectory
                    permission
                    { recursive = True
                    }
                )
        |> Maybe.withDefault (Task.succeed path)
        |> Task.andThen (\_ -> FileSystem.writeFile permission (Maybe.withDefault (Bytes.fromString "") def.content) path)
        |> Task.mapError (\err -> PlatformError { err = err, path = path })
        |> Task.map (\_ -> {})



-- ㊙️


recursiveList : FileSystem.Permission -> Path -> Path -> Task.Task Error (Array Definition)
recursiveList permission readPath listPath =
    listPath
        |> Path.prepend readPath
        |> FileSystem.listDirectory permission
        |> Task.mapError (\err -> PlatformError { err = err, path = listPath })
        |> Task.andThen
                (\listing ->
                    listing
                        |> Array.mapAndKeepJust
                                (\{ entityType, path } ->
                                    when entityType is
                                        File ->
                                            -- TODO: Add option to also list hidden files
                                            if String.startsWith "." path.filename then
                                                Nothing
                                            else
                                                path
                                                    |> Path.prepend listPath
                                                    |> Definition.create
                                                    |> Array.singleton
                                                    |> Task.succeed
                                                    |> Just

                                        Directory ->
                                            path
                                                |> Path.prepend listPath
                                                |> recursiveList permission readPath
                                                |> Just

                                        _ ->
                                            Nothing
                                )
                        |> Task.sequence
                        |> Task.map Array.flatten
                )
